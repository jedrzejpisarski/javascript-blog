//TAG LIST//


const optTagsListSelector = '.tag.list';
const optCloudClassCount = '5';
const optCloudClassPrefix ='tag-size-';

function calculateTagsParams('.tags'){
  console.log('calculateTagsParams:', calculateTagsParams)
  const params = max('0') min('999999');
  for(let tag in tags){
    console.log(tag + ' is used ' + tags[tag] + ' times');
    if(tags[tag] > params.max){
    params.max = tags[tag];
    }
    else if(tags[tag]) < params.min){
    params.min = tags[tag];
    } 
  } 
}
function calculateTagClass('count', 'params'){  
  const normalizedCount = count - params.min;
  const normalizedMax = params.max - params.min;
  const percentage = normalizedCount / normalizedMax;
  const classNumber = Math.floor( percentage * (optCloudClassCount - 1) + 1 );
}  
function generateTags(){
  /* [NEW] create a new variable allTags with an empty array */
  let allTags = {};

  /* find all articles */
  const articles = document.querySelectorAll(optTagsListSelector);
  /* START LOOP: for every article: */
  for(let article of articles) {
    
    /* find tags wrapper */
    const tagsList = article.querySelector(optTagsListSelector);
    
    /* make html variable with empty string */
    et html = ' '
    
    /* get tags from data-tags attribute */
    const tagsList = article.getAttribute('data-tags');
    
    /* split tags into array */
    const tagsArray = tags.split(' ');
    
    /* START LOOP: for each tag */
    for(let tag of tagsArray) {
      
      /* generate HTML of the link */
      const htmlLink = '<li><a href="#tag-' + tag + '">' + tag + '</a></li>';
      
       /* [NEW] check if this link is NOT already in allTags */
       if(!allTags[tag]) {
       /* [NEW] add tag to allTags object */
       allTags[tag] = 1;
       }
       else {
         allTags[tag]++;
       /* [NEW] add generated code to allTags array */
         allTags.push(linkHTML);
       }

    /* END LOOP: for each tag */
     }
    /* insert HTML of all the links into the tags wrapper */

  /* END LOOP: for every article: */
  } 
  /* [NEW] find list of tags in right column */
  const tagList = document.querySelector('tags');

  /* [NEW] add html from allTags to tagList */
  tagList.innerHTML = allTags.join(' '); 
  
  const tagsParams = calculateTagsParams(allTags);
  console.log('tagsParams:', tagsParams)

  /* [NEW] create variable for all links HTML code */
  let allTagsHTML = '';

  /* [NEW] START LOOP: for each tag in allTags: */
  for(let tag in allTags){
    /* [NEW] generate code of a link and add it to allTagsHTML */
    allTagsHTML += tagLinkHTML;
    const tagLinkHTML = '<li>' + calculateTagClass(allTags[tag], tagsParam) + '</li>';
    console.log('tagLinkHTML:', tagLinkHTML);
  }
  /* [NEW] END LOOP: for each tag in allTags: */

  /*[NEW] add HTML from allTagsHTML to tagList */
  tagList.innerHTML = allTagsHTML;
}  

return params; 
