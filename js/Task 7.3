//* AUTHOR LIST*//

const optAuthorsListSelector = '.author.list';
const optCloudClassCount = '5';
const optCloudClassPrefix ='tag-size-';

function calculateAuthorsParams('.authors'){
  console.log('calculateAuthorsParams:', calculateAuthorsParams);
  
  const params = max('0') min('999999');
  
  for(let author in authors){
    console.log(author + ' is used ' + authors[author] + ' times');
    
    if(authors[author] > params.max){
    params.max = authors[author];
    }
    else if(authors[author] < params.min){
    params.min = authors[author];
    } 
  } 
}
function calculateTagClass('count', 'params'){  
  const normalizedCount = count - params.min;
  const normalizedMax = params.max - params.min;
  const percentage = normalizedCount / normalizedMax;
  const classNumber = Math.floor( percentage * (optCloudClassCount - 1) + 1 );
}  
function generateAuthor(){
  /* [NEW] create a new variable allAuthors with an empty array */
  let allAuthors = {};

  /* find all authors */
  const articles = document.querySelectorAll(optAuthorsListSelector);
  /* START LOOP: for every author: */
  for(let author of authors) {
    
    /* find tags wrapper */
    const tagsList = article.querySelector(optAuthorsListSelector);
    
    /* make html variable with empty string */
    et html = ' '
    
    /* get tags from data-authors attribute */
    const authorsList = article.getAttribute('data-author');
    
    /* generate HTML of the link */
    const htmlLink = '<li><a href="#author-' + author + '">' + author + '</a></li>';
      
    /* [NEW] check if this link is NOT already in allAuthors */
    if(!allAuthors[author]) {
    /* [NEW] add tag to allAuthors object */
    allAuthors[author] = 1;
    }
    else {
    allAuthors[author]++;
    /* [NEW] add generated code to allTags array */
    allAuthors.push(linkHTML);
    }
    /* insert HTML of all the links into the tags wrapper */

  /* END LOOP: for every author: */
  } 
  /* [NEW] find list of authors in right column */
  const authorsList = document.querySelector('authors');

  /* [NEW] add html from allTags to tagList */
  authorsList.innerHTML = allAuthors.join(' '); 
  
  const tagsParams = calculateTagsParams(allTags);
  console.log('tagsParams:', tagsParams)

  /* [NEW] create variable for all links HTML code */
  let allAuthorsHTML = '';

  /* [NEW] START LOOP: for each tag in allTags: */
  for(let author in allAuthors){
    /* [NEW] generate code of a link and add it to allTagsHTML */
    allAuthorHTML += authorLinkHTML;
    const tagLinkHTML = '<li>' + calculateTagClass(allTags[tag], tagsParam) + '</li>';
    console.log('tagLinkHTML:', tagLinkHTML);
  }
  /* [NEW] END LOOP: for each tag in allTags: */

  /*[NEW] add HTML from allTagsHTML to tagList */
  tagList.innerHTML = allTagsHTML;
}  

return params(); 
